// <auto-generated />
using System;
using Lesson11;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lesson11.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241223165533_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lesson11.Entitys.DTO.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorDescription")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.AuthorData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("BooksQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateOnly?>("DeathDate")
                        .HasColumnType("date");

                    b.Property<bool>("NobelPrizeForLiterature")
                        .HasColumnType("boolean");

                    b.Property<bool>("PulitzerPrize")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("AuthorsData");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Created")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.GenreLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("GenresLinks");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.Author", b =>
                {
                    b.HasOne("Lesson11.Entitys.DTO.AuthorData", "AuthorData")
                        .WithOne("Author")
                        .HasForeignKey("Lesson11.Entitys.DTO.Author", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorData");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.Book", b =>
                {
                    b.HasOne("Lesson11.Entitys.DTO.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.GenreLink", b =>
                {
                    b.HasOne("Lesson11.Entitys.DTO.Book", "Book")
                        .WithMany("Links")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lesson11.Entitys.DTO.Genre", "Genre")
                        .WithMany("Links")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.AuthorData", b =>
                {
                    b.Navigation("Author")
                        .IsRequired();
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.Book", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Lesson11.Entitys.DTO.Genre", b =>
                {
                    b.Navigation("Links");
                });
#pragma warning restore 612, 618
        }
    }
}
